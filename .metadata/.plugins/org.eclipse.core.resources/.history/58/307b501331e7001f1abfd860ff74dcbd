package com.springboot.app.backend.turismo.service;

import java.time.LocalDate;
import java.util.List;

import org.springframework.stereotype.Service;

import com.springboot.app.backend.turismo.dto.RutaConTraducciones;
import com.springboot.app.backend.turismo.model.Coordenada;
import com.springboot.app.backend.turismo.model.Destino;
import com.springboot.app.backend.turismo.model.DestinoTraduccion;
import com.springboot.app.backend.turismo.model.Preferencia;
import com.springboot.app.backend.turismo.model.Ruta;
import com.springboot.app.backend.turismo.repository.DestinoTraduccionRepository;
import com.springboot.app.backend.turismo.repository.RutaRepository;

import java.util.Comparator;


import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RutaImpl implements IRutaService {
	
	private final IPreferenciaService preferenciaService;
	private final IDestinoService destinoService;
	private final RutaRepository rutaRepository;
	private final DestinoTraduccionRepository destinoTraduccionRepository;
	
	@Override
	public RutaConTraducciones generarRutaParaUsuario(Integer usuarioId, Coordenada ubicacionActual, Destino.ClimaIdeal climaActual, String idioma) {
	    Preferencia preferencia = preferenciaService.obtenerPreferenciasPorUsuario(usuarioId);
	    List<Destino> destinos = destinoService.obtenerDestinosSegunPreferencias(preferencia, climaActual);

	    // Ordenar los destinos según distancia mínima
	    destinos.sort(Comparator.comparingInt(d -> calcularDistancia(d.getCoordenada(), ubicacionActual)));

	    // Crear la ruta con los destinos originales
	    Ruta ruta = Ruta.builder()
	            .usuario(preferencia.getUsuario())
	            .destinos(destinos)  // Aquí se guardan los destinos originales, NO los traducidos
	            .distanciaTotal(calcularDistanciaTotal(destinos))
	            .duracionEstimada(calcularDuracionTotal(destinos))
	            .fechaCreacion(LocalDate.now())
	            .build();

	    rutaRepository.save(ruta);

	    // Obtener las traducciones para devolverlas al frontend
	    List<DestinoTraduccion> destinosTraducidos = destinos.stream()
	        .map(destino -> destinoTraduccionRepository.findByDestino_IdAndIdioma(destino.getId(), idioma)).toList();

	    // Retornar la ruta con los destinos traducidos al frontend
	    return new RutaConTraducciones(ruta, destinosTraducidos);
	}
	
	private int calcularDistancia(Coordenada origen, Coordenada destino) {
	    return (int) Math.sqrt(Math.pow(destino.getLatitud() - origen.getLatitud(), 2) + Math.pow(destino.getLongitud() - origen.getLongitud(), 2));
	}

	private int calcularDistanciaTotal(List<Destino> destinos) {
	    int distanciaTotal = 0;
	    for (int i = 0; i < destinos.size() - 1; i++) {
	        distanciaTotal += calcularDistancia(destinos.get(i).getCoordenada(), destinos.get(i + 1).getCoordenada());
	    }
	    return distanciaTotal;
	}

	private int calcularDuracionTotal(List<Destino> destinos) {
	    return destinos.stream().mapToInt(d -> d.getDuracionVisita()).sum();
	}
}
