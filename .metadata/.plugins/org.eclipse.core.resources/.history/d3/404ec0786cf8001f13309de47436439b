package com.springboot.app.backend.turismo.service;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.util.UriComponentsBuilder;

import com.springboot.app.backend.turismo.model.PuntoDeInteres.ClimaIdeal;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Service
public class ClimaService {

    private final WebClient webClient;

    public ClimaService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("https://api.openweathermap.org/data/2.5").build();
    }

    public ClimaIdeal obtenerClima(double latitud, double longitud, long tiempoDisponible) {
        String apiKey = "TU_API_KEY"; // Reemplaza con tu API Key

        // Construcción de la URL de la API
        String url = UriComponentsBuilder.fromHttpUrl("https://api.openweathermap.org/data/2.5/forecast")
                .queryParam("lat", latitud)
                .queryParam("lon", longitud)
                .queryParam("appid", apiKey)
                .queryParam("units", "metric")
                .queryParam("lang", "es")
                .build()
                .toUriString();

        // Hacer la solicitud a la API del clima
        Map<String, Object> response = webClient.get()
                .uri(url)
                .retrieve()
                .bodyToMono(Map.class)
                .block();

        if (response == null || !response.containsKey("list")) {
            return ClimaIdeal.SOLEADO; // Si hay error, asumir SOLEADO
        }

        List<Map<String, Object>> forecastList = (List<Map<String, Object>>) response.get("list");

        // Calcular la hora objetivo en base al tiempo disponible
        LocalDateTime horaObjetivo = LocalDateTime.now().plusMinutes(tiempoDisponible);
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        ClimaIdeal climaPredicho = ClimaIdeal.SOLEADO; // Por defecto, asumimos que es SOLEADO
        LocalDateTime mejorDiferencia = LocalDateTime.MAX; // Para encontrar la predicción más cercana

        for (Map<String, Object> forecast : forecastList) {
            String dtTxt = (String) forecast.get("dt_txt"); // Ejemplo: "2025-03-03 18:00:00"
            LocalDateTime forecastTime = LocalDateTime.parse(dtTxt, formatter);

            // Buscar la predicción más cercana a la hora objetivo
            if (Math.abs(forecastTime.compareTo(horaObjetivo)) < Math.abs(mejorDiferencia.compareTo(horaObjetivo))) {
                mejorDiferencia = forecastTime;
                List<Map<String, Object>> weather = (List<Map<String, Object>>) forecast.get("weather");

                if (weather != null && !weather.isEmpty()) {
                    String descripcion = (String) weather.get(0).get("description");
                    climaPredicho = esLluvioso(descripcion) ? ClimaIdeal.LLUVIOSO : ClimaIdeal.SOLEADO;
                }
            }
        }
        return climaPredicho;
    }

    private boolean esLluvioso(String descripcion) {
        return descripcion.contains("lluvia") || descripcion.contains("tormenta") || descripcion.contains("chubascos");
    }
}
