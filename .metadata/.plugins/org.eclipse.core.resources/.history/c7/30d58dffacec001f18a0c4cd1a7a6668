package com.springboot.app.backend.turismo.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.springboot.app.backend.turismo.dto.RutaConTraducciones;
import com.springboot.app.backend.turismo.model.ColoniaHormigas;
import com.springboot.app.backend.turismo.model.Coordenada;
import com.springboot.app.backend.turismo.model.DistanciaPuntoDeInteres;
import com.springboot.app.backend.turismo.model.PuntoDeInteres;
import com.springboot.app.backend.turismo.model.PuntoDeInteresTraduccion;
import com.springboot.app.backend.turismo.model.EstadoRuta;
import com.springboot.app.backend.turismo.model.Preferencia;
import com.springboot.app.backend.turismo.model.Ruta;
import com.springboot.app.backend.turismo.model.RutaPuntoDeInteres;
import com.springboot.app.backend.turismo.model.TiempoPuntoDeInteres;
import com.springboot.app.backend.turismo.repository.PuntoDeInteresTraduccionRepository;
import com.springboot.app.backend.turismo.repository.DistanciaPuntoDeInteresRepository;
import com.springboot.app.backend.turismo.repository.EstadoRutaRepository;
import com.springboot.app.backend.turismo.repository.PreferenciaTipoActividadRepository;
import com.springboot.app.backend.turismo.repository.RutaPuntoDeInteresRepository;
import com.springboot.app.backend.turismo.repository.RutaRepository;
import com.springboot.app.backend.turismo.repository.TiempoPuntoDeInteresRepository;

import org.springframework.transaction.annotation.Transactional;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RutaImpl implements IRutaService {
	
	private final IPreferenciaService preferenciaService;
	private final IDestinoService destinoService;
	private final RutaRepository rutaRepository;
	private final PuntoDeInteresTraduccionRepository destinoTraduccionRepository;
	private final RutaPuntoDeInteresRepository rutaDestinoRepository;
	private final EstadoRutaRepository estadoRutaRepository;
	private final DistanciaPuntoDeInteresRepository distanciaRepository;
    private final TiempoPuntoDeInteresRepository tiempoRepository;
    private final PreferenciaTipoActividadRepository preferenciaRepository;
	
	@Override
    @Transactional(readOnly = true)
    public List<Ruta> obtenerTodas() {
        return rutaRepository.findAll();
    }
	
	@Override
    @Transactional(readOnly = true)
    public Optional<Ruta> obtenerPorId(Integer id) {
        return rutaRepository.findById(id);
    }
		
	@Override
	@Transactional
    public Ruta guardar(Ruta ruta) {
        return rutaRepository.save(ruta);
    }
	
	@Override
	@Transactional
    public void eliminar(Integer id) {
		rutaRepository.deleteById(id);
    }
	
	
	@Override
    @Transactional
    public RutaConTraducciones generarRutaParaUsuario(Integer usuarioId, Coordenada ubicacionActual, PuntoDeInteres.ClimaIdeal climaActual, String idioma) {
        Preferencia preferencia = preferenciaService.obtenerPreferenciasPorUsuario(usuarioId);
        Optional<EstadoRuta> estadoRuta = estadoRutaRepository.findById(3);
        List<PuntoDeInteres> destinos = destinoService.obtenerDestinosSegunPreferencias(preferencia, climaActual);

        // Inicializamos la colonia de hormigas
        ColoniaHormigas coloniaHormigas = new ColoniaHormigas(
                destinos, preferencia, 100, 10, distanciaRepository, tiempoRepository, preferenciaRepository
        );

        // Generamos la ruta optimizada
        List<PuntoDeInteres> mejorRuta = coloniaHormigas.optimizarRuta();

        // Crear la ruta en la BD
        Ruta ruta = Ruta.builder()
                .usuario(preferencia.getUsuario())
                .distanciaTotal(calcularDistanciaTotal(mejorRuta))
                .duracionEstimada(calcularDuracionTotal(mejorRuta))
                .fechaCreacion(LocalDate.now())
                .estado(estadoRuta.get())
                .build();

        rutaRepository.save(ruta); // Guardamos la ruta en la BD

        // Crear las relaciones de la ruta optimizada con los puntos de interés
        List<RutaPuntoDeInteres> rutaPuntos = mejorRuta.stream()
                .map(puntoDeInteres -> RutaPuntoDeInteres.builder()
                        .ruta(ruta)
                        .puntoDeInteres(puntoDeInteres)
                        .visitado(false)
                        .build())
                .toList();

        rutaDestinoRepository.saveAll(rutaPuntos); // Guardamos las relaciones en la BD

        // Obtener las traducciones para devolverlas al frontend
        List<PuntoDeInteresTraduccion> destinosTraducidos = mejorRuta.stream()
                .map(destino -> destinoTraduccionRepository.findByPuntoDeInteresAndIdioma(destino.getId(), idioma))
                .toList();

        // Retornamos la ruta optimizada con traducciones
        return new RutaConTraducciones(ruta, destinosTraducidos);
    }

    @Override
    @Transactional
    public boolean marcarDestinoComoLlegado(Integer idRutaDestino) {
        Optional<RutaPuntoDeInteres> rutaDestinoOpt = rutaDestinoRepository.findById(idRutaDestino);

        if (rutaDestinoOpt.isPresent()) {
            RutaPuntoDeInteres rutaDestino = rutaDestinoOpt.get();
            rutaDestino.setVisitado(true);
            rutaDestinoRepository.save(rutaDestino);
            return true;
        }
        return false;
    }

    /**
     * Calcular la distancia total de la ruta optimizada
     */
    private double calcularDistanciaTotal(List<PuntoDeInteres> ruta) {
        double distanciaTotal = 0;
        for (int i = 0; i < ruta.size() - 1; i++) {
            Optional<DistanciaPuntoDeInteres> distanciaOpt = distanciaRepository.findByOrigenAndDestino(ruta.get(i), ruta.get(i + 1));
            distanciaTotal += distanciaOpt.map(DistanciaPuntoDeInteres::getDistancia).orElse(0.0);
        }
        return distanciaTotal;
    }

    /**
     * Calcular la duración total de la ruta optimizada
     */
    private double calcularDuracionTotal(List<PuntoDeInteres> ruta) {
        double duracionTotal = 0;
        for (int i = 0; i < ruta.size() - 1; i++) {
            Optional<TiempoPuntoDeInteres> tiempoOpt = tiempoRepository.findByOrigenAndDestino(ruta.get(i), ruta.get(i + 1));
            duracionTotal += tiempoOpt.map(TiempoPuntoDeInteres::getTiempo).orElse(0.0);
        }
        return duracionTotal;
    }
}

