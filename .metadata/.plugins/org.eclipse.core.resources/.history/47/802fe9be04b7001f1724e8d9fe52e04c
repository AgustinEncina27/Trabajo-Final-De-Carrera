package com.springboot.app.backend.turismo.auth.service;

import java.util.List;

import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.springboot.app.backend.turismo.auth.controller.LoginRequest;
import com.springboot.app.backend.turismo.auth.controller.RegisterRequest;
import com.springboot.app.backend.turismo.auth.controller.TokenResponse;
import com.springboot.app.backend.turismo.auth.repository.Token;
import com.springboot.app.backend.turismo.auth.repository.TokenRepository;
import com.springboot.app.backend.turismo.usuario.User;
import com.springboot.app.backend.turismo.usuario.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class AuthService {
	private final UserRepository userRepository;
	private final TokenRepository tokenRepository;
	private final PasswordEncoder passwordEncoder;
	private final JwtService jwtService;
	private final AuthenticationManager authenticationManager;
	
	public TokenResponse register(RegisterRequest request) {
		var user = User.builder()
				.name(request.name())
				.email(request.email())
				.password(passwordEncoder.encode(request.password()))
				.build();
		var savedUser = userRepository.save(user);
		var jwtToken = jwtService.generateToken(user);
		var refreshToken = jwtService.generateRefreshToken(user);
		saveUserToken(savedUser,jwtToken);
		return new TokenResponse(jwtToken,refreshToken);
		
	}
	
	public TokenResponse login(LoginRequest request) {
		authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(
						request.email(), 
						request.password()
					)
		);
		var user = userRepository.findByEmail(request.email())
				.orElseThrow();
		var jwtToken = jwtService.generateToken(user);
		var refreshToken = jwtService.generateRefreshToken(user);
		revokeAllUserTokens(user);
		
		return null;	
	}
	
	private void revokeAllUserTokens(final User user) {
		final List<Token> validUserTokens = tokenRepository
				.findAllValidIsFalseOrRevokedIsFalseByUserId(user.getId());
		if(!validUserTokens.isEmpty()) {
			for(final Token token : validUserTokens) {
				token.setExpired(true);
				token.setRevoked(true);
			}
			tokenRepository.saveAll(validUserTokens);
		}
	}
	
	
	private void saveUserToken(User user, String jwtToken) {
		var token = Token.builder()
				.user(user)
				.token(jwtToken)
				.tokenType(Token.TokenType.BEARER)
				.expired(false)
				.revoked(false)
				.build();
		tokenRepository.save(token);
	}
}
