package com.springboot.app.backend.turismo.model;

import com.springboot.app.backend.turismo.repository.PuntoDeInteresTipoDeActividadRepository;
import org.jgrapht.Graph;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.SimpleWeightedGraph;

import java.util.*;

public class ColoniaHormigas {
    private final Graph<Destino, DefaultWeightedEdge> grafo;
    private final Preferencia perfilUsuario;
    private final int iteraciones;
    private final int numHormigas;
    private final Map<DefaultWeightedEdge, Double> feromonas;
    private final PuntoDeInteresTipoDeActividadRepository destinoTipoDeActividadRepository;

    public ColoniaHormigas(List<Destino> destinos, Preferencia perfilUsuario, int iteraciones, int numHormigas, PuntoDeInteresTipoDeActividadRepository destinoTipoDeActividadRepository) {
        this.grafo = new SimpleWeightedGraph<>(DefaultWeightedEdge.class);
        this.perfilUsuario = perfilUsuario;
        this.iteraciones = iteraciones;
        this.numHormigas = numHormigas;
        this.feromonas = new HashMap<>();
        this.destinoTipoDeActividadRepository = destinoTipoDeActividadRepository;

        // Agregar nodos al grafo
        destinos.forEach(grafo::addVertex);

        // Calcular distancias y agregar aristas con peso
        for (Destino d1 : destinos) {
            for (Destino d2 : destinos) {
                if (!d1.equals(d2)) {
                    double distancia = calcularDistancia(d1.getCoordenada(), d2.getCoordenada());
                    DefaultWeightedEdge edge = grafo.addEdge(d1, d2);
                    grafo.setEdgeWeight(edge, distancia);
                    feromonas.put(edge, 1.0); // Inicializar feromonas en 1.0
                }
            }
        }
    }

    private double calcularDistancia(Coordenada origen, Coordenada destino) {
        final int RADIO_TIERRA_KM = 6371;
        double lat1 = Math.toRadians(origen.getLatitud());
        double lon1 = Math.toRadians(origen.getLongitud());
        double lat2 = Math.toRadians(destino.getLatitud());
        double lon2 = Math.toRadians(destino.getLongitud());

        double dLat = lat2 - lat1;
        double dLon = lon2 - lon1;

        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                   Math.cos(lat1) * Math.cos(lat2) *
                   Math.sin(dLon / 2) * Math.sin(dLon / 2);

        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

        return RADIO_TIERRA_KM * c;
    }

    public List<Destino> optimizarRuta() {
        List<Destino> mejorRuta = new ArrayList<>();
        double mejorUtilidad = 0.0;

        for (int i = 0; i < iteraciones; i++) {
            for (int j = 0; j < numHormigas; j++) {
                List<Destino> ruta = construirRuta();
                double utilidad = calcularUtilidadRuta(ruta);

                if (utilidad > mejorUtilidad) {
                    mejorUtilidad = utilidad;
                    mejorRuta = new ArrayList<>(ruta);
                }

                actualizarFeromonas(ruta, utilidad);
            }
            evaporarFeromonas();
        }
        return mejorRuta;
    }

    private List<Destino> construirRuta() {
        List<Destino> ruta = new ArrayList<>();
        Set<Destino> visitados = new HashSet<>();
        Destino nodoActual = grafo.vertexSet().iterator().next(); // Elegir un punto inicial aleatorio
        double tiempoRestante = perfilUsuario.getTiempoDisponible();

        while (tiempoRestante > 0) {
            List<Destino> opciones = obtenerOpciones(nodoActual, visitados);
            if (opciones.isEmpty()) break;

            Destino siguiente = seleccionarSiguiente(opciones, nodoActual);
            if (siguiente == null) break;

            DefaultWeightedEdge edge = grafo.getEdge(nodoActual, siguiente);
            double tiempoViaje = grafo.getEdgeWeight(edge);

            if (tiempoViaje + siguiente.getDuracionVisita() > tiempoRestante) break;

            ruta.add(siguiente);
            visitados.add(siguiente);
            nodoActual = siguiente;
            tiempoRestante -= (tiempoViaje + siguiente.getDuracionVisita());
        }
        return ruta;
    }

    private List<Destino> obtenerOpciones(Destino nodoActual, Set<Destino> visitados) {
        List<Destino> opciones = new ArrayList<>();
        for (DefaultWeightedEdge edge : grafo.edgesOf(nodoActual)) {
            Destino destino = grafo.getEdgeTarget(edge);
            if (!visitados.contains(destino)) {
                opciones.add(destino);
            }
        }
        return opciones;
    }

    private double calcularUtilidadRuta(List<Destino> ruta) {
        return ruta.stream().mapToDouble(this::calcularUtilidad).sum();
    }

    private double calcularUtilidad(Destino destino) {
        double utilidadTotal = 0.0;

        // Obtener las actividades asociadas al destino
        List<DestinoTipoDeActividad> actividades = destinoTipoDeActividadRepository.findByDestinoId(destino.getId());

        for (DestinoTipoDeActividad actividad : actividades) {
            String nombreActividad = actividad.getTipoDeActividad().getNombre();
            Double pesoUsuario = perfilUsuario.getPesosActividades().getOrDefault(nombreActividad, 0.0);
            utilidadTotal += pesoUsuario * actividad.getValor();
        }

        return utilidadTotal;
    }

    private void actualizarFeromonas(List<Destino> ruta, double utilidad) {
        for (int i = 0; i < ruta.size() - 1; i++) {
            DefaultWeightedEdge edge = grafo.getEdge(ruta.get(i), ruta.get(i + 1));
            feromonas.put(edge, feromonas.get(edge) + utilidad);
        }
    }

    private void evaporarFeromonas() {
        feromonas.replaceAll((k, v) -> v * 0.9);
    }
}

