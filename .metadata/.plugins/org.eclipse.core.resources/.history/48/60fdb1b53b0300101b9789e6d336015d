package com.springboot.app.backend.turismo.controller;


import lombok.RequiredArgsConstructor;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import java.util.Map;

import com.springboot.app.backend.turismo.model.Preferencia;
import com.springboot.app.backend.turismo.model.Usuario;
import com.springboot.app.backend.turismo.service.UsuarioImpl;

import java.util.List;

@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
public class UserController {
	
    private final UsuarioImpl usuarioService;
    
    @GetMapping("/obtenerTodos")
    public List<Usuario> obtenerTodos() {
        return usuarioService.obtenerTodos();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Usuario> obtenerPorId(@PathVariable Integer id) {
        return usuarioService.obtenerPorId(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @GetMapping("/correo/{correo}")
    public ResponseEntity<Usuario> obtenerPorCorreo(@PathVariable String correo) {
        return usuarioService.obtenerPorCorreo(correo)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }
    
    @PostMapping("/preferencias")
    public ResponseEntity<Map<String, String>> guardarPreferencias(
            @RequestHeader("Authorization") String authorizationHeader,
            @RequestBody Preferencia preferencia) {

        if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "Token no válido"));
        }

        // Extraer token eliminando "Bearer "
        String token = authorizationHeader.substring(7);
        
        usuarioService.guardarPreferencias(token, preferencia);
        return ResponseEntity.ok(Map.of("message", "Preferencia guardada con éxito"));
    }
    
    
    @PostMapping
    public Usuario guardar(@RequestBody Usuario usuario) {
        return usuarioService.guardar(usuario);
    }
        
    @PutMapping("/preferencias")
    public ResponseEntity<?> actualizarPreferencias(
    		@RequestHeader("Authorization") String authorizationHeader,
            @RequestBody Preferencia nuevaPreferencia) {
    	
    	if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "Token no válido"));
        }
    	
        Preferencia preferenciaActualizada = usuarioService.actualizarPreferencias(authorizationHeader, nuevaPreferencia);
        return ResponseEntity.ok(preferenciaActualizada);
    }
    
    // Endpoint para actualizar la distancia recorrida
    @PutMapping("/distancia")
    public ResponseEntity<?> actualizarDistancia(
    		@RequestHeader("Authorization") String authorizationHeader,
    		@RequestBody Long distanciaRecorrida) {
    	
    	if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "Token no válido"));
        }
    	
        if (distanciaRecorrida == null || distanciaRecorrida < 0) {
            return ResponseEntity.badRequest().body("La distancia recorrida no puede ser nula o negativa.");
        }
        
        String resultado = usuarioService.actualizarDistancia(authorizationHeader, distanciaRecorrida);
        return ResponseEntity.ok(resultado);
    }

    // Endpoint para actualizar los puntos obtenidos
    @PutMapping("/{id}/puntos")
    public ResponseEntity<String> actualizarPuntos(
    		@RequestHeader("Authorization") String authorizationHeader,
    		@RequestBody Integer puntosObtenidos) {
    	
        if (puntosObtenidos == null || puntosObtenidos < 0) {
            return ResponseEntity.badRequest().body("Los puntos obtenidos no pueden ser nulos o negativos.");
        }
        
        String resultado = usuarioService.actualizarPuntos(authorizationHeader, puntosObtenidos);
        return ResponseEntity.ok(resultado);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminar(@PathVariable Integer id) {
        if (!usuarioService.obtenerPorId(id).isPresent()) {
            return ResponseEntity.notFound().build();
        }
        
        usuarioService.eliminar(id);
        return ResponseEntity.noContent().build();
    }
}
