package com.springboot.app.backend.turismo.service;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.springboot.app.backend.turismo.model.PuntoDeInteres.ClimaIdeal;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Service
public class ClimaService {
    
    private final WebClient webClient;

    public ClimaService(WebClient webClient) {
        this.webClient = webClient;
    }

    public ClimaIdeal obtenerClima(double latitud, double longitud, long tiempoDisponible) {

        if (latitud < -90 || latitud > 90 || longitud < -180 || longitud > 180) {
            throw new IllegalArgumentException("Las coordenadas están fuera del rango permitido. Latitud: " + latitud + ", Longitud: " + longitud);
        }

        String url = String.format("https://api.open-meteo.com/v1/forecast?latitude=%.6f&longitude=%.6f&hourly=precipitation&timezone=America/Argentina/Buenos_Aires",
                                   latitud, longitud);

        try {
            // Llamada a la API con WebClient
            Map<String, Object> response = webClient.get()
                    .uri(url)
                    .retrieve()
                    .bodyToMono(Map.class)
                    .block();

            if (response == null || !response.containsKey("hourly")) {
                System.err.println("Error: Respuesta inválida de la API");
                return ClimaIdeal.SOLEADO;
            }

            // Extraer los datos de la API
            Map<String, Object> hourly = (Map<String, Object>) response.get("hourly");
            List<String> times = (List<String>) hourly.get("time");
            List<Double> precipitation = (List<Double>) hourly.get("precipitation");

            if (times == null || precipitation == null) {
                System.err.println("Error: No se encontraron datos de precipitación.");
                return ClimaIdeal.SOLEADO;
            }

            // Calcular la cantidad de horas a revisar
            int horasARevisar = (int) (tiempoDisponible / 60);
            LocalDateTime ahora = LocalDateTime.now();

            for (int i = 0; i < times.size() && i < horasARevisar; i++) {
                LocalDateTime forecastTime = LocalDateTime.parse(times.get(i), DateTimeFormatter.ISO_DATE_TIME);

                if (!forecastTime.isBefore(ahora)) {
                    double lluvia = precipitation.get(i);
                    if (lluvia > 0) {
                        return ClimaIdeal.LLUVIOSO; // Si en alguna hora llueve, devuelve LLUVIOSO
                    }
                }
            }
        } catch (Exception e) {
            System.err.println("Error al obtener el clima: " + e.getMessage());
        }

        return ClimaIdeal.SOLEADO;
    }
}

