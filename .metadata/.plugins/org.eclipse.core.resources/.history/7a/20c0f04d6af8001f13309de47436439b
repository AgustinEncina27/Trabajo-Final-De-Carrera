package com.springboot.app.backend.turismo.service;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.util.UriComponentsBuilder;

import com.springboot.app.backend.turismo.model.PuntoDeInteres.ClimaIdeal;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Service
public class ClimaService {

    private final WebClient webClient;

    public ClimaService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("https://api.openweathermap.org/data/2.5").build();
    }

    public ClimaIdeal obtenerClima(double latitud, double longitud, long tiempoDisponible) {
        String apiKey = "TU_API_KEY"; // Reemplaza con tu API Key

        // Construcción de la URL de la API
        String url = UriComponentsBuilder.fromHttpUrl("https://api.openweathermap.org/data/2.5/forecast")
                .queryParam("lat", latitud)
                .queryParam("lon", longitud)
                .queryParam("appid", apiKey)
                .queryParam("units", "metric")
                .queryParam("lang", "es")
                .build()
                .toUriString();

        // Hacer la solicitud a la API del clima
        Map<String, Object> response = webClient.get()
                .uri(url)
                .retrieve()
                .bodyToMono(Map.class)
                .block();

        if (response == null || !response.containsKey("list")) {
            return ClimaIdeal.SOLEADO; // Si hay error, asumir SOLEADO
        }

        List<Map<String, Object>> forecastList = (List<Map<String, Object>>) response.get("list");

        // Buscar la predicción más cercana dentro del tiempo disponible
        for (Map<String, Object> forecast : forecastList) {
            List<Map<String, Object>> weather = (List<Map<String, Object>>) forecast.get("weather");

            if (weather != null && !weather.isEmpty()) {
                String descripcion = (String) weather.get(0).get("description");

                // Determinar si es SOLEADO o LLUVIOSO
                return esLluvioso(descripcion) ? ClimaIdeal.LLUVIOSO : ClimaIdeal.SOLEADO;
            }
        }
        return ClimaIdeal.SOLEADO; // Si no hay datos, asumir SOLEADO
    }

    private boolean esLluvioso(String descripcion) {
        return descripcion.contains("lluvia") || descripcion.contains("tormenta") || descripcion.contains("chubascos");
    }
}
