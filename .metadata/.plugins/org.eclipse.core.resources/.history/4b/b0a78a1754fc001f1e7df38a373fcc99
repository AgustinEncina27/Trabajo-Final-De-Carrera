package com.springboot.app.backend.turismo.service;

import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import com.springboot.app.backend.turismo.repository.ObjetivoPuntosInteresRepository;
import com.springboot.app.backend.turismo.repository.PuntoDeInteresRepository;
import com.springboot.app.backend.turismo.repository.PuntoDeInteresTraduccionRepository;
import com.springboot.app.backend.turismo.repository.UserRepository;

import lombok.RequiredArgsConstructor;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

@Service
@RequiredArgsConstructor
public class ObjetivoPuntosInteresService {

    private final ObjetivoPuntosInteresRepository repository;
    private final UserRepository usuarioRepository;
    private final PuntoDeInteresRepository puntoDeInteresRepository;

    @Scheduled(cron = "0 0 0 * * MON") // Ejecuta todos los lunes a medianoche
    public void renovarDesafios() {
        Calendar calendar = Calendar.getInstance();
        calendar.add(Calendar.DAY_OF_YEAR, -7); // Restar 7 días
        Date fechaLimite = calendar.getTime();

        // Eliminar objetivos antiguos
        repository.eliminarObjetivosAntiguos(fechaLimite);

        // Asignar nuevos desafíos a cada usuario
        List<Usuario> usuarios = usuarioRepository.findAll();
        List<PuntoDeInteres> puntos = puntoDeInteresRepository.findAll();

        for (Usuario usuario : usuarios) {
            for (PuntoDeInteres punto : puntos) {
                ObjetivoPuntosInteres nuevoObjetivo = ObjetivoPuntosInteres.builder()
                        .usuario(usuario)
                        .puntoDeInteres(punto)
                        .visitado(false)
                        .fechaAsignacion(new Date())
                        .build();
                repository.save(nuevoObjetivo);
            }
        }
    }
}
