package com.springboot.app.backend.turismo.controller;

import java.util.List;
import java.util.Map;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.app.backend.turismo.model.ObjetivoPuntosInteres;
import com.springboot.app.backend.turismo.repository.ObjetivoPuntosInteresRepository;
import com.springboot.app.backend.turismo.service.ObjetivoPuntosInteresService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/objetivos")
@RequiredArgsConstructor
public class ObjetivoPuntosInteresController {

    private final ObjetivoPuntosInteresRepository repository;
    private final ObjetivoPuntosInteresService service;
    
    @GetMapping("/{usuarioId}")
    public ResponseEntity<?> obtenerObjetivosPorUsuario(@RequestHeader("Authorization") String authorizationHeader) {
    	
    	if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "Token no válido"));
        }
    	
        List<ObjetivoPuntosInteres> objetivos = service.obtenerObjetivosPorUsuario(authorizationHeader);
        return ResponseEntity.ok(objetivos);
    }
    
    @PostMapping("/{usuarioId}/asignar")
    public ResponseEntity<?> asignarObjetivosFijos(@RequestHeader("Authorization") String authorizationHeader) {
    	
    	if (authorizationHeader == null || !authorizationHeader.startsWith("Bearer ")) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("message", "Token no válido"));
        }
    	
    	
        service.asignarObjetivosFijos(authorizationHeader);
        return ResponseEntity.ok().build();
    }
    
    @PutMapping("/{usuarioId}/visitar/{puntoDeInteresId}")
    public ResponseEntity<Void> marcarComoVisitado(
    		@RequestHeader("Authorization") String authorizationHeader,
            @PathVariable Integer puntoDeInteresId) {
        repository.marcarComoVisitado(authorizationHeader, puntoDeInteresId);
        return ResponseEntity.ok().build();
    }
    
    @DeleteMapping("/eliminar-antiguos")
    public ResponseEntity<Void> eliminarDesafios() {
        service.eliminarDesafios();
        return ResponseEntity.ok().build(); // Devuelve un 200 OK sin contenido
    }
}
