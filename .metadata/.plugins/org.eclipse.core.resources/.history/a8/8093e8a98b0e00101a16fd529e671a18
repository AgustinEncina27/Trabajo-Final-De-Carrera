package com.springboot.app.backend.turismo.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.springboot.app.backend.turismo.auth.service.JwtService;
import com.springboot.app.backend.turismo.dto.RutaConTraducciones;
import com.springboot.app.backend.turismo.model.ColoniaHormigas;
import com.springboot.app.backend.turismo.model.Coordenada;
import com.springboot.app.backend.turismo.model.DistanciaPuntoDeInteres;
import com.springboot.app.backend.turismo.model.PuntoDeInteres;
import com.springboot.app.backend.turismo.model.PuntoDeInteresTraduccion;
import com.springboot.app.backend.turismo.model.EstadoRuta;
import com.springboot.app.backend.turismo.model.Preferencia;
import com.springboot.app.backend.turismo.model.Ruta;
import com.springboot.app.backend.turismo.model.RutaPuntoDeInteres;
import com.springboot.app.backend.turismo.model.TiempoPuntoDeInteres;
import com.springboot.app.backend.turismo.repository.PuntoDeInteresTraduccionRepository;
import com.springboot.app.backend.turismo.repository.DistanciaPuntoDeInteresRepository;
import com.springboot.app.backend.turismo.repository.EstadoRutaRepository;
import com.springboot.app.backend.turismo.repository.RutaPuntoDeInteresRepository;
import com.springboot.app.backend.turismo.repository.RutaRepository;
import com.springboot.app.backend.turismo.repository.TiempoPuntoDeInteresRepository;

import org.springframework.transaction.annotation.Transactional;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class RutaImpl implements IRutaService {
	
	private final IPreferenciaService preferenciaService;
	private final IPuntoDeInteresService puntoDeInteresService;
	private final RutaRepository rutaRepository;
	private final PuntoDeInteresTraduccionRepository puntoDeInteresTraduccionRepository;
	private final RutaPuntoDeInteresRepository rutaDestinoRepository;
	private final EstadoRutaRepository estadoRutaRepository;
	private final DistanciaPuntoDeInteresRepository distanciaRepository;
    private final TiempoPuntoDeInteresRepository tiempoRepository;
    private final ClimaService climaService;
    private final JwtService jwtService;

	
    @Override
    @Transactional(readOnly = true)
    public List<RutaConTraducciones> obtenerTodas(String idioma) {
        return rutaRepository.findAll().stream()
                .map(ruta -> convertirARutaConTraducciones(ruta, idioma))
                .collect(Collectors.toList());
    }
    
    @Override
    @Transactional(readOnly = true)
    public Optional<Ruta> obtenerPorId(Integer id) {
        return rutaRepository.findById(id);
    }

    @Override
    @Transactional(readOnly = true)
    public Optional<RutaConTraducciones> obtenerPorId(Integer id, String idioma) {
        return rutaRepository.findById(id)
                .map(ruta -> convertirARutaConTraducciones(ruta, idioma));
    }

    @Override
    @Transactional(readOnly = true)
    public List<RutaConTraducciones> obtenerRutasPorUsuario(String authorizationHeader, String idioma) {
    	
    	// Extraer token eliminando "Bearer "
        String token = authorizationHeader.substring(7);
		
		// Obtener ID del usuario desde el token
        Integer idUsuario = jwtService.extractUserId(token);
    	
    	return rutaRepository.findByUsuarioId(idUsuario).stream()
                .map(ruta -> convertirARutaConTraducciones(ruta, idioma))
                .collect(Collectors.toList());
    }
		
	@Override
	@Transactional
    public Ruta guardar(Ruta ruta) {
        return rutaRepository.save(ruta);
    }
	
	@Override
	@Transactional
    public void eliminar(Integer id) {
		rutaRepository.deleteById(id);
    }
	
	
	@Override
	@Transactional
	public RutaConTraducciones generarRutaParaUsuario(String authorizationHeader, Coordenada ubicacionActual, 
			Long distanciaPreferida,Integer costeMaximo,Long tiempoDisponible, String idioma) {
		
		// Extraer token eliminando "Bearer "
        String token = authorizationHeader.substring(7);
		
		// Obtener ID del usuario desde el token
        Integer idUsuario = jwtService.extractUserId(token);
		
	    Preferencia preferencia = preferenciaService.obtenerPreferenciasPorUsuario(idUsuario);
	    Optional<EstadoRuta> estadoRuta = estadoRutaRepository.findById(3);
	    
	    PuntoDeInteres.ClimaIdeal climaActual = climaService.obtenerClima(ubicacionActual.getLatitud(), ubicacionActual.getLongitud(), tiempoDisponible);
	    
	    
	    List<PuntoDeInteres> destinos = puntoDeInteresService.obtenerPuntosDeInteresSegunClima(climaActual);

	    // Inicializar colonia de hormigas
	    ColoniaHormigas coloniaHormigas = new ColoniaHormigas(
	            destinos, preferencia, 100, 10,distanciaPreferida,costeMaximo,tiempoDisponible, distanciaRepository, tiempoRepository);

	    // Generar ruta optimizada considerando la ubicación actual
	    List<PuntoDeInteres> mejorRuta = coloniaHormigas.optimizarRuta(ubicacionActual);

	    // Crear la ruta en la BD
	    Ruta ruta = Ruta.builder()
	            .usuario(preferencia.getUsuario())
	            .distanciaTotal(calcularDistanciaTotal(mejorRuta))
	            .duracionEstimada(calcularDuracionTotal(mejorRuta))
	            .fechaCreacion(LocalDate.now())
	            .estado(estadoRuta.get())
	            .clima(climaActual)
	            .build();
	    
	 // Crear las relaciones de la ruta optimizada con los puntos de interés
	    List<RutaPuntoDeInteres> rutaPuntos = mejorRuta.stream()
	            .map(puntoDeInteres -> RutaPuntoDeInteres.builder()
	                    .ruta(ruta)
	                    .puntoDeInteres(puntoDeInteres)
	                    .visitado(false)
	                    .build())
	            .toList();
	    
	    ruta.setPuntosDeInteres(rutaPuntos);
	    
	    Ruta rutaGuardada=rutaRepository.save(ruta); 
    
	    // Obtener traducciones para la respuesta
	    List<PuntoDeInteresTraduccion> destinosTraducidos = mejorRuta.stream()
	            .map(destino -> puntoDeInteresTraduccionRepository.findByPuntoDeInteresAndIdioma(destino.getId(), idioma))
	            .toList();
	    
	    return new RutaConTraducciones(rutaGuardada, destinosTraducidos);
	}

    @Override
    @Transactional
    public boolean marcarDestinoComoLlegado(Integer idRutaDestino) {
        Optional<RutaPuntoDeInteres> rutaDestinoOpt = rutaDestinoRepository.findById(idRutaDestino);

        if (rutaDestinoOpt.isPresent()) {
            RutaPuntoDeInteres rutaDestino = rutaDestinoOpt.get();
            rutaDestino.setVisitado(true);
            rutaDestinoRepository.save(rutaDestino);
            return true;
        }
        return false;
    }

    /**
     * Calcular la distancia total de la ruta optimizada
     */
    private double calcularDistanciaTotal(List<PuntoDeInteres> ruta) {
        double distanciaTotal = 0;
        for (int i = 0; i < ruta.size() - 1; i++) {
            Optional<DistanciaPuntoDeInteres> distanciaOpt = distanciaRepository.findByPuntoDeInteresOrigenAndPuntoDeInteresDestino(ruta.get(i), ruta.get(i + 1));
            distanciaTotal += distanciaOpt.map(DistanciaPuntoDeInteres::getDistancia).orElse(0.0);
        }
        return distanciaTotal;
    }

    /**
     * Calcular la duración total de la ruta optimizada
     */
    private double calcularDuracionTotal(List<PuntoDeInteres> ruta) {
        double duracionTotal = 0;
        for (int i = 0; i < ruta.size() - 1; i++) {
            Optional<TiempoPuntoDeInteres> tiempoOpt = tiempoRepository.findByOrigenAndDestino(ruta.get(i), ruta.get(i + 1));
            duracionTotal += tiempoOpt.map(TiempoPuntoDeInteres::getTiempo).orElse(0.0);
        }
        return duracionTotal;
    }
    
    private RutaConTraducciones convertirARutaConTraducciones(Ruta ruta, String idioma) {
        List<PuntoDeInteresTraduccion> destinosTraducidos = ruta.getPuntosDeInteres().stream()
                .map(destino -> puntoDeInteresTraduccionRepository.findByPuntoDeInteresAndIdioma(destino.getPuntoDeInteres().getId(), idioma))
                .collect(Collectors.toList());

        return new RutaConTraducciones(ruta, destinosTraducidos);
    }

}

