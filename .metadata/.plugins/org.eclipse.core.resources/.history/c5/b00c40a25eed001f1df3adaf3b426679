package com.springboot.app.backend.turismo.controller;

import java.util.List;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.app.backend.turismo.dto.RutaConTraducciones;
import com.springboot.app.backend.turismo.model.Coordenada;
import com.springboot.app.backend.turismo.model.PuntoDeInteres;
import com.springboot.app.backend.turismo.model.Ruta;
import com.springboot.app.backend.turismo.service.IRutaService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/rutas")
@RequiredArgsConstructor
public class RutaController {
	
	private final IRutaService rutaService;
	
	@GetMapping
    public List<Ruta> obtenerTodas() {
        return rutaService.obtenerTodas();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Ruta> obtenerPorId(@PathVariable Integer id) {
        return rutaService.obtenerPorId(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public Ruta guardar(@RequestBody Ruta ruta) {
        return rutaService.guardar(ruta);
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> eliminar(@PathVariable Integer id) {
    	rutaService.eliminar(id);
        return ResponseEntity.noContent().build();
    }
	
	@PostMapping("/generar")
	public ResponseEntity<RutaConTraducciones> generarRuta(
	        @RequestParam Integer usuarioId,
	        @RequestParam double latitud,
	        @RequestParam double longitud,
	        @RequestParam PuntoDeInteres.ClimaIdeal climaActual,
	        @RequestParam String idioma) {

	    Coordenada ubicacionActual = new Coordenada(null, latitud, longitud);
	    RutaConTraducciones ruta = rutaService.generarRutaParaUsuario(usuarioId, ubicacionActual, climaActual, idioma);
	    return ResponseEntity.ok(ruta);
	}
	
	@PutMapping("/destino/{id}/llegar")
    public ResponseEntity<String> marcarDestinoComoLlegado(@PathVariable Integer id) {
        boolean actualizado = rutaService.marcarDestinoComoLlegado(id);
        if (actualizado) {
            return ResponseEntity.ok("Destino marcado como visitado.");
        } else {
            return ResponseEntity.notFound().build();
        }
    }
}
