package com.springboot.app.backend.turismo.service;

import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.springboot.app.backend.turismo.model.Preferencia;
import com.springboot.app.backend.turismo.model.PreferenciaTipoDeActividad;
import com.springboot.app.backend.turismo.model.Usuario;
import com.springboot.app.backend.turismo.repository.PreferenciaRepository;
import com.springboot.app.backend.turismo.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class PreferenciaImpl implements IPreferenciaService {
		
	private final PreferenciaRepository preferenciaRepository;
	
    private final UserRepository usuarioRepository;
	
	@Override
    @Transactional(readOnly = true)
    public List<Preferencia> obtenerTodas() {
        return preferenciaRepository.findAll();
    }
	
	@Override
    @Transactional(readOnly = true)
    public Optional<Preferencia> obtenerPorId(Integer id) {
        return preferenciaRepository.findById(id);
    }
	
	@Override
    @Transactional(readOnly = true)
	public Preferencia obtenerPreferenciasPorUsuario(Integer usuarioId) {
	    return preferenciaRepository.findByUsuarioId(usuarioId)
	            .orElseThrow(() -> new RuntimeException("Preferencias no encontradas para el usuario " + usuarioId));
	}
	
	@Override
	@Transactional
    public Preferencia guardar(Preferencia preferencia) {
        return preferenciaRepository.save(preferencia);
    }
	
	@Override
	@Transactional
	public Preferencia actualizarPreferencias(Integer idUsuario, Preferencia nuevaPreferencia) {
	    Usuario usuario = usuarioRepository.findById(idUsuario)
	        .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

	    Preferencia preferenciaExistente = usuario.getPreferencia();
	    if (preferenciaExistente == null) {
	        throw new RuntimeException("No se encontraron preferencias para el usuario");
	    }

	    // Actualizar solo los valores necesarios
	    preferenciaExistente.setDistanciaPreferida(nuevaPreferencia.getDistanciaPreferida());
	    preferenciaExistente.setTiempoDisponible(nuevaPreferencia.getTiempoDisponible());
	    preferenciaExistente.setAccesibilidadRequerida(nuevaPreferencia.isAccesibilidadRequerida());
	    preferenciaExistente.setCosteMaximo(nuevaPreferencia.getCosteMaximo());
	    preferenciaExistente.setPopularidad(nuevaPreferencia.getPopularidad());

	    // âœ… Asegurar que las preferencias de actividades tienen sus IDs correctos
	    List<PreferenciaTipoDeActividad> actividadesActualizadas = null;
	    for (PreferenciaTipoDeActividad actividad : nuevaPreferencia.getPreferenciasActividades()) {
	        if (actividad.getId() != null) { // Solo si ya existe en la BD
	            actividadesActualizadas.add(actividad);
	        } else {
	            throw new RuntimeException("Actividad sin ID encontrada. No se puede actualizar.");
	        }
	    }

	    preferenciaExistente.setPreferenciasActividades(actividadesActualizadas);

	    return preferenciaRepository.save(preferenciaExistente);
	}

	
	@Override
	@Transactional
    public void eliminar(Integer id) {
        preferenciaRepository.deleteById(id);
    }
}
