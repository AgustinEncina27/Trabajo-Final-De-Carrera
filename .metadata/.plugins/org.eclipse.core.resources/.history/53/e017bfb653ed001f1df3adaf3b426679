package com.springboot.app.backend.turismo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.springboot.app.backend.turismo.dto.UserResponse;
import com.springboot.app.backend.turismo.model.Preferencia;
import com.springboot.app.backend.turismo.model.PreferenciaTipoDeActividad;
import com.springboot.app.backend.turismo.model.Usuario;
import com.springboot.app.backend.turismo.repository.PreferenciaRepository;
import com.springboot.app.backend.turismo.repository.PreferenciaTipoActividadRepository;
import com.springboot.app.backend.turismo.repository.UserRepository;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class UsuarioImpl implements IUsuarioService {
	
	private final UserRepository usuarioRepository;
    private final PreferenciaRepository preferenciaRepository;
    private final PreferenciaTipoActividadRepository preferenciaTipoDeActividadRepository;
	
	@Override
    @Transactional(readOnly = true)
    public List<Usuario> obtenerTodos() {
        return usuarioRepository.findAll();
    }
	
	@Override
    @Transactional(readOnly = true)
    public Optional<Usuario> obtenerPorId(Integer id) {
        return usuarioRepository.findById(id);
    }
	
	@Override
    @Transactional
    public List<UserResponse> cambioContrasena() {
        return usuarioRepository.findAll()
                .stream()
                .map(user -> new UserResponse(user.getNombreUsuario(), user.getCorreoUsuario()))
                .toList();
    }
	
	@Override
	@Transactional(readOnly = true)
    public Optional<Usuario> obtenerPorCorreo(String correo) {
        return usuarioRepository.findByCorreoUsuario(correo);
    }
	
	@Override
	@Transactional
    public Usuario guardar(Usuario usuario) {
        return usuarioRepository.save(usuario);
    }
	@Override
	@Transactional
    public void eliminar(Integer id) {
        usuarioRepository.deleteById(id);
    }
	
	@Override
	@Transactional
	public Usuario guardarPreferencias(Integer idUsuario, Preferencia preferencia) {
	    Usuario usuario = usuarioRepository.findById(idUsuario)
	            .orElseThrow(() -> new RuntimeException("Usuario no encontrado"));

	    // Establecer la relaci√≥n en ambos sentidos
	    preferencia.setUsuario(usuario);

	    // Guardar primero la preferencia para obtener su ID
	    Preferencia preferenciaGuardada = preferenciaRepository.save(preferencia);

	    // Ahora que la preferencia tiene ID, asignarlo a cada PreferenciaTipoDeActividad
	    if (preferencia.getPreferenciasActividades() != null) {
	        for (PreferenciaTipoDeActividad actividad : preferencia.getPreferenciasActividades()) {
	            actividad.setPreferencia(preferenciaGuardada);
	        }
	        // Guardar las actividades con la referencia a la preferencia
	        preferenciaTipoDeActividadRepository.saveAll(preferencia.getPreferenciasActividades());
	    }

	    usuario.setPreferencia(preferenciaGuardada);
	    usuarioRepository.save(usuario); // Guardar el usuario con la referencia a la preferencia

	    return usuario;
	}

}
