package com.springboot.app.backend.turismo.service;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.util.UriComponentsBuilder;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

@Service
public class ClimaService {

    private final WebClient webClient;

    public ClimaService(WebClient.Builder webClientBuilder) {
        this.webClient = webClientBuilder.baseUrl("https://api.openweathermap.org/data/2.5").build();
    }

    public String obtenerClima(double latitud, double longitud, long tiempoDisponible) {
        String apiKey = "TU_API_KEY"; // Reemplaza con tu API key de OpenWeatherMap

        // Construir la URL con los parámetros
        String url = UriComponentsBuilder.fromHttpUrl("https://api.openweathermap.org/data/2.5/forecast")
                .queryParam("lat", latitud)
                .queryParam("lon", longitud)
                .queryParam("appid", apiKey)
                .queryParam("units", "metric")
                .queryParam("lang", "es")
                .build()
                .toUriString();

        // Realizar la llamada a la API y procesar la respuesta
        Map<String, Object> response = webClient.get()
                .uri(url)
                .retrieve()
                .bodyToMono(Map.class)
                .block(); // Bloquea la ejecución para obtener el resultado de la API

        if (response == null || !response.containsKey("list")) {
            return "Desconocido"; // Si la API no responde correctamente
        }

        List<Map<String, Object>> forecastList = (List<Map<String, Object>>) response.get("list");

        // Obtener la fecha actual + tiempo disponible en horas
        LocalDateTime horaObjetivo = LocalDateTime.now().plusMinutes(tiempoDisponible);

        for (Map<String, Object> forecast : forecastList) {
            String dtTxt = (String) forecast.get("dt_txt"); // Formato "2025-03-03 18:00:00"
            LocalDateTime forecastTime = LocalDateTime.parse(dtTxt.replace(" ", "T"));

            // Buscar la predicción más cercana a la hora objetivo
            if (forecastTime.isAfter(horaObjetivo.minusHours(1)) && forecastTime.isBefore(horaObjetivo.plusHours(1))) {
                Map<String, Object> main = (Map<String, Object>) forecast.get("main");
                List<Map<String, Object>> weather = (List<Map<String, Object>>) forecast.get("weather");

                if (weather != null && !weather.isEmpty()) {
                    String descripcion = (String) weather.get(0).get("description");

                    if (descripcion.contains("lluvia") || descripcion.contains("tormenta")) {
                        return "LLUVIOSO";
                    }
                }
            }
        }
        return "SOLEADO"; // Si no se encuentra un pronóstico de lluvia
    }
}
